opacity = 0.6,      ## transparency again
title = title[[3]])
}
else if (input$CF == "Probability"){
}
## TOP5 ##
if (input$top15count == TRUE){
pic1<-pic1 %>%
addMarkers(~top5count$center_lng, ~top5count$center_lat, icon = greenLeafIcon)
}
else{
pic1
}
if (input$top15FPD == TRUE){
pic1<-pic1 %>%
addMarkers(~top5FPD$center_lng, ~top5FPD$center_lat, icon = redLeafIcon)
}
else{
pic1
}
## subway analysis ##
if (input$subway == 1){
pic1
}
else if (input$subway == 2) {
pic1<-pic1 %>% addMarkers(data = subway1, ~Latitude, ~Longitude, clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F))
}
else if (input$subway == 3){
pic1<-pic1 %>% addMarkers(data = subway2, ~L1, ~L2, clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = F))
}
})
## Probability Heat Map ##
observeEvent(input$map_click, {
click <- input$map_click
output$pos <- renderText({"Coordinates of Click"})
output$lng <- renderText({paste0(" Longitude: ", round(click$lng),2)})
output$lat <- renderText({paste0(" Latitude: " , round(click$lat),2)})
if(input$type=="Heatmap"){
map_new <- leafletProxy("map") %>%
clearShapes() %>% clearMarkers() %>%
addMarkers(lng = click$lng, lat = click$lat) %>%
addCircles(lng = click$lng, lat = click$lat, radius = input$radius_pos,
fillOpacity = 0.2, stroke = FALSE)
dat_drop_inside <- dynamicdata[abs(dropoff_longitude - click$lng)*111320 <  input$radius_pos &
abs(dropoff_latitude - click$lat)*111190 < input$radius_pos]
dat_pick_inside <- dynamicdata[abs(pickup_longitude - click$lng)*111320 <  input$radius_pos &
abs(pickup_latitude - click$lat)*111190 < input$radius_pos]
if(nrow(dat_drop_inside) > 0 & input$pd == "Drop off"){
map_new <- map_new %>% clearWebGLHeatmap() %>%
addWebGLHeatmap(lng=dat_drop_inside$dropoff_longitude, lat = dat_drop_inside$dropoff_latitude,
opacity = 0.7, size = 30)
}
if(nrow(dat_pick_inside) > 0 & input$pd == "Pick up"){
map_new <- map_new %>% clearWebGLHeatmap() %>%
addWebGLHeatmap(lng=dat_pick_inside$pickup_longitude, lat = dat_pick_inside$pickup_latitude, opacity = 0.7, size=30, alphaRange = 0.5)
}
map_new
}
})
## Recommand Locations ##
getdistance <- function(destination, ori){
lon1 = ori[2]*pi/180
lat1 = ori[1]*pi/180
lon2 = destination[2]*pi/180
lat2 = destination[1]*pi/180
deltaLat = lat2 - lat1
deltaLon = lon2 - lon1
a = sin(deltaLat/2)^2 + cos(lat1) * cos(lat2) * sin(deltaLon/2)^2
c = 2 * asin(sqrt(a))
EARTH_RADIUS = 6371
return (c * EARTH_RADIUS * 1000)
}
observe({
origin <- c(40.756197, -73.97644)
event <- input$map_click
#if(is.null(event)){
#  warn <- "Please select a valid postion"
#  leafletProxy("map") %>%
#    addPopups(lat = origin[1], lng = origin[2], popup = warn,
#              options = popupOptions(closeButton = TRUE))
#  return()
#}
#else{
origin <- c(event$lat, event$lng)
#}
radius <- input$radius_pos
Time <- input$time
if(input$type=="Points"){
if(input$pd2 == "Pick up") {
if(input$hours != 0){
dat <- filter(dynamicdata, pickup_hour <= input$hours + 1 & pickup_hour >= input$hours - 1)
dat <- dat[,c(2,1)] #may change dataset
}
else{
dat <- filter(dynamicdata, pickup_hour == 23 | pickup_hour <= 1)
dat <- dat[,c(2,1)] #may change dataset
}
}
else{
if(input$hours != 0){
dat <- filter(dynamicdata, dropoff_hour <= input$hours + 1 & dropoff_hour >= input$hours - 1)
dat <- dat[,c(6,5)] #may change dataset
}
else{
dat <- filter(dynamicdata, dropoff_hour == 23 | dropoff_hour <= 1)
dat <- dat[,c(6,5)] #may change dataset
}
}
dis <- function(destination){
return(getdistance(destination, origin))
}
in_radius.log <- apply(dat, MARGIN = 1, FUN = dis) <= radius
in_radius.dat <- dat[in_radius.log, ]
colnames(in_radius.dat) <- c("latitude","longitude")
if(nrow(in_radius.dat) >= 5){
cluster <- kmeans(in_radius.dat, 5)
out <- data.frame(cluster$centers)
}
else{
warn <- "Please select a valid postion(not efficient data here)"
leafletProxy("map") %>%
clearPopups() %>%
addPopups(lat = origin[1], lng = origin[2], popup = warn,
options = popupOptions(closeButton = TRUE))
out <- data.frame(in_radius.dat)
}
leafletProxy("map", data = out) %>%
clearMarkers() %>% clearShapes() %>% clearWebGLHeatmap() %>%
addMarkers(~longitude, ~latitude) %>%
addCircleMarkers(lng = origin[2], lat = origin[1], radius = 5, color = "red") %>%
clearShapes() %>%
addCircles(lng = origin[2], lat = origin[1], radius = input$radius_pos)
}
})
######
observe({
event <- input$map_shape_click
if (is.null(event))
return()
dattest = data.frame(Longitude = event$lng, Latitude = event$lat)
coordinates(dattest) <- ~ Longitude + Latitude
proj4string(dattest) <- CRS("+proj=longlat")
dattest <- spTransform(dattest, proj4string(myShape1))
rtest = over(dattest, myShape1)
output$districttimeplot <- renderPlot({
if (nrow(rtest) == 0) {
return(NULL)
}
if (input$days == "All Day"){
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,]
count_resultNTA = apply(count_resultNTA, 1, sum)
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
else if (input$days == "Business Day"){
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,1]
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
else if (input$days == "Not Business Day") {
count_resultNTA = count_result[which(rownames(count_result) == rtest$NTACode),,2]
index <- c(0:23)
dfcount_resultNTA <- data.frame(index, count_resultNTA)
ggplot(data=dfcount_resultNTA, aes(x=index, y=count_resultNTA)) + geom_bar(stat="identity") +
labs(x = "hour") + labs(y = "count per hour")+ggtitle("pick up count flow trend")+geom_smooth(formula = y~x)
}
})
})
## Direction Heatmap ##
observe({
amount <- reactive({amount <- input$Amount2})
pickuphour <- reactive({
pickuphour <- input$pickuphour
})
if(input$direction=='south'){
directiondata<-filter(dynamicdata,dynamicdata$dropoff_latitude<dynamicdata$pickup_latitude, dynamicdata$pickup_hour==pickuphour())
output$trip_direction <- renderLeaflet({
leaflet(directiondata[sample(1:dim(directiondata)[1],amount(),replace = T),]) %>%
setView(lat=40.7128, lng=-74.0059, zoom=11) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addWebGLHeatmap(lng=~pickup_longitude, lat=~pickup_latitude, size = 300, unit="m",alphaRange = 0.5)
})
}
if(input$direction=='north'){
directiondata<-filter(dynamicdata,dynamicdata$dropoff_latitude>dynamicdata$pickup_latitude, dynamicdata$pickup_hour==pickuphour())
output$trip_direction <- renderLeaflet({
leaflet(directiondata[sample(1:dim(directiondata)[1],amount(),replace = T),],) %>%
setView(lat=40.7128, lng=-74.0059, zoom=11) %>%
addProviderTiles(providers$CartoDB.DarkMatter) %>%
addWebGLHeatmap(lng=~pickup_longitude, lat=~pickup_latitude, size = 300, unit="m",alphaRange = 0.5)
})
}
})
## Dynamic Map ################################################################
output$map2 <- renderLeaflet({
leaflet() %>%
setView(lat=40.7128, lng=-74.0059, zoom=11) %>%
# Base groups
addTiles(group = "default") %>%
addProviderTiles(providers$Stamen.Toner, group = "blackwhite") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "grey")%>%
# Layers control
addLayersControl(
baseGroups = c("default", "blackwhite", "grey"),
overlayGroups = c("points", "region"),
options = layersControlOptions(collapsed = FALSE)
)
})
drawvalue <- reactive({
if (input$pd == 'pick up'){
t <- filter(dynamicdata, pickup_hour == input$hours, pickup_date == "1/1/2015")
return(t)
}
else{
t <- filter(dynamicdata, dropoff_hour == input$hours, dropoff_date == "1/1/2015")
return(t)
}
})
observe({
radius <-  100
if (input$pd == 'Pick up')  {
t <- filter(dynamicdata, pickup_hour == input$hours, pickup_date == input$`choose date`)
longitudepmax <- max(t$pickup_longitude)
latitudepmax <- max(t$pickup_latitude)
longitudepmin <- min(t$pickup_longitude)
latitudepmin <- min(t$pickup_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~pickup_longitude, ~pickup_latitude,radius = radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "green",
popup = as.character(paste0('<strong>longitude </strong>&nbsp&nbsp',
'<strong>latitude </strong><br>',
round(t$pickup_longitude,5),
'&nbsp&nbsp&nbsp',
round(t$pickup_latitude,5))),
group='points') %>%
addRectangles(
lng1=longitudepmax, lat1=latitudepmax,
lng2=longitudepmin, lat2=latitudepmin,
fillColor = "green",group='region')
}
else if (input$pd == 'Drop off')  {
t <- filter(dynamicdata, dropoff_hour == input$hours, dropoff_date == input$`choose date`)
longitudedmax <- max(t$dropoff_longitude)
latitudedmax <- max(t$dropoff_latitude)
longitudedmin <- min(t$dropoff_longitude)
latitudedmin <- min(t$dropoff_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~dropoff_longitude, ~dropoff_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "red",
popup = as.character(paste0('<strong>longitude </strong>&nbsp&nbsp',
'<strong>latitude </strong><br>',
round(t$dropoff_longitude,5),
'&nbsp&nbsp&nbsp',
round(t$dropoff_latitude,5))),
group = 'points') %>%
addRectangles(
lng1=longitudedmax, lat1=latitudedmax,
lng2=longitudedmin, lat2=latitudedmin,
fillColor = "red",
color = "red",group = 'region'
)
}
else if (input$pd == "All"){
t <- filter(dynamicdata, dropoff_hour == input$hours | pickup_hour == input$hours,
dropoff_date == input$`choose date` | pickup_date == input$`choose date`)
longitudepmax <- max(t$pickup_longitude)
latitudepmax <- max(t$pickup_latitude)
longitudepmin <- min(t$pickup_longitude)
latitudepmin <- min(t$pickup_latitude)
longitudedmax <- max(t$dropoff_longitude)
latitudedmax <- max(t$dropoff_latitude)
longitudedmin <- min(t$dropoff_longitude)
latitudedmin <- min(t$dropoff_latitude)
leafletProxy("map2", data = t) %>%
clearShapes() %>%
addCircles(~dropoff_longitude, ~dropoff_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "red",
popup = as.character(paste0('<strong>longitude </strong>&nbsp&nbsp',
'<strong>latitude </strong><br>',
round(t$dropoff_longitude,5),
'&nbsp&nbsp&nbsp',
round(t$dropoff_latitude,5))),
group='points') %>%
addCircles(~pickup_longitude, ~pickup_latitude, radius=radius,
stroke=FALSE, fillOpacity=0.8,fillColor = "green",
popup = as.character(paste0('<strong>longitude </strong>&nbsp&nbsp',
'<strong>latitude </strong><br>',
round(t$pickup_longitude,5),
'&nbsp&nbsp&nbsp',
round(t$pickup_latitude,5))),
group = 'points') %>%
addRectangles(
lng1=longitudepmax, lat1=latitudepmax,
lng2=longitudepmin, lat2=latitudepmin,
fillColor = "green",group='region'
) %>%
addRectangles(
lng1=longitudedmax, lat1=latitudedmax,
lng2=longitudedmin, lat2=latitudedmin,
fillColor = "red",
color = "red",group='region'
)
}
})
## Data Explorer ################################################################
## Histogram ##
observe({
type2 <- reactive({type2 <- input$type2})
if(input$type2=='pickup'){
output$payment_type <- renderPlotly({
plot_ly(x = dataa$pickup_hour,type = 'histogram')
})
}
if(input$type2=='dropoff'){
output$payment_type<-renderPlotly({
plot_ly(x = dataa$dropoff_hour,type = 'histogram')
})
}
})
dataa$time<-ifelse(dataa$pickup_hour>=6&dataa$pickup_hour<=18,'day','night')
output$plot2 <- renderPlotly({
plot_ly(data = filter(dataa,dataa$payment_type==ifelse(input$method=='cash',1,0)),
x = ~trip_distance,y = ~fare_amount,color = ~time)})
output$rawtable <- DT::renderDataTable({
DT::datatable(dataa)
})
output$dynamicdata <- DT::renderDataTable({
DT::datatable(dynamicdata)
})
})
shinyApp(ui = ui.r, server = server-2.R)
shinyApp(ui = ui.r, server = server.R)
getwd()
shinyApp(ui = ui.r, server = server.R)
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
test <- NULL
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test,
sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist (test, xlab="T (y-rep)", yaxt="n",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- NULL
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
test <- NULL
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)])}
hist (test, xlab="T (y-rep)", yaxt="n",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist (test, xlab="T (y-rep)", yaxt="n",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist (test, xlab="T (y-rep)", yaxt="n",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist (test, xlab="T (y^{rep})",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 15)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(test, xlab="T (y^{rep})",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 13)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(test, xlab="T (y^{rep})",
breaks=seq(-.5, max(test)+.5), cex=2)
test <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 20)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
test <- c(test, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(test, xlab="T (y^{rep})",
breaks=seq(-.5, max(test)+.5), cex=2)
histo <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 20)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
histo <- c(histo, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(histo, xlab="T(y^{rep})", title = "Distribution of T (y^{rep})")
histo <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 20)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
histo <- c(histo, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(histo, xlab="T(y^{rep})", main = "Distribution of T (y^{rep})")
histo <- 0
for (i in 1:1000){
theta <- rbeta (1,8,14)
y.rep <- rbinom (1,1,theta)
while (sum(y.rep==0) < 20)
y.rep <- c(y.rep, rbinom(1,1,theta))
n.rep <- length(y.rep)
histo <- c(histo, sum (y.rep[2:n.rep] != y.rep[1:(n.rep-1)]))}
hist(histo, xlab="T(y^{rep})", main = "Distribution of T (y^{rep})")
histo <- 0
for (i in 1:1000){
theta <- rbeta(1,8,14)
repetition <- rbinom(1,1,theta)
while (sum(repetition == 0) < 20)
repetition <- c(repetition, rbinom(1,1,theta))
repetition_num <- length(repetition)
histo <- c(histo, sum (repetition[2:repetition_num] != repetition[1:(repetition_num-1)]))}
hist(histo, xlab="T(y^{rep})", main = "Distribution of T (y^{rep})")
histo <- 0
for (i in 1:1000){
theta <- rbeta(1,8,14)
repetition <- rbinom(1,1,theta)
while (sum(repetition == 0) < 20)
repetition <- c(repetition, rbinom(1,1,theta))
repetition_num <- length(repetition)
histo <- c(histo, sum (repetition[2:repetition_num] != repetition[1:(repetition_num-1)]))}
hist(histo, xlab="T(y^{rep})", main = "Distribution of T (y^{rep})", breaks = seq(0, 35, 1))
runApp('~/Downloads/Untitled.R')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='baileypierson',
token='C485F73DC23173614704347ECD28F015',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
rsconnect::setAccountInfo(name='baileypierson',
token='C485F73DC23173614704347ECD28F015',
secret='<SECRET>')
rsconnect::setAccountInfo(name='baileypierson',
token='C485F73DC23173614704347ECD28F015',
secret='uXLB+8aojzKF5lAfeyZur1S/bp3ct2T3Dum322oC')
getwd()
setwd('/Users/baileypierson/Documents/GitHub/Fall2018-Project2-sec1proj2_grp2')
library(shiny)
runApp()
getwd()
setwd('/Users/baileypierson/Documents/GitHub/Fall2018-Project2-sec1proj2_grp2/app')
library(shiny)
runApp()
runApp()
runApp()
deployApp()
getwd()
deployApp("/Users/baileypierson/Documents/GitHub/Fall2018-Project2-sec1proj2_grp2/app")
deployApp("project_2")
runApp()
getwd()
runApp()
runApp()
runApp()
